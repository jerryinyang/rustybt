name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Quick smoke test - runs first for fast feedback
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run smoke test
        run: |
          python -c "import rustybt; print(f'RustyBT version: {rustybt.__version__}')"
          python -c "import polars, hypothesis, structlog, pydantic; print('All dependencies OK')"

  # Code quality checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run black
        run: black --check rustybt/ tests/ --line-length 100

      - name: Run ruff
        run: ruff check rustybt/ tests/

      - name: Run mypy (non-blocking)
        run: mypy rustybt/ --strict --ignore-missing-imports || true
        continue-on-error: true

  # Full test suite
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: smoke-test
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=rustybt --cov-report=xml --cov-report=term --maxfail=50

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-rustybt

  # Build check
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Build distribution
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Security checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run bandit
        run: bandit -r rustybt/ -c pyproject.toml || true
        continue-on-error: true

      - name: Run safety check
        run: safety check --ignore 70612 || true
        continue-on-error: true

  # Summary job - all checks must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [smoke-test, lint, test, build, security]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.smoke-test.result }}" != "success" ]]; then
            echo "Smoke test failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All CI checks passed!"
