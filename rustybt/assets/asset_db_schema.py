import sqlalchemy as sa

# Define a version number for the database generated by these writers
# Increment this version number any time a change is made to the schema of the
# assets database
# NOTE: When upgrading this remember to add a downgrade in:
# .asset_db_migrations
ASSET_DB_VERSION = 8

# A frozenset of the names of all tables in the assets db
# NOTE: When modifying this schema, update the ASSET_DB_VERSION value
asset_db_table_names = frozenset(
    {
        "asset_router",
        "equities",
        "equity_symbol_mappings",
        "equity_supplementary_mappings",
        "futures_contracts",
        "exchanges",
        "futures_root_symbols",
        "version_info",
        "bundle_metadata",
        "data_quality_metrics",
    }
)

metadata = sa.MetaData()

exchanges = sa.Table(
    "exchanges",
    metadata,
    sa.Column(
        "exchange",
        sa.Text,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column("canonical_name", sa.Text, nullable=False),
    sa.Column("country_code", sa.Text, nullable=False),
)

equities = sa.Table(
    "equities",
    metadata,
    sa.Column(
        "sid",
        sa.BigInteger,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column("asset_name", sa.Text),
    sa.Column("start_date", sa.BigInteger, default=0, nullable=False),
    sa.Column("end_date", sa.BigInteger, nullable=False),
    sa.Column("first_traded", sa.BigInteger),
    sa.Column("auto_close_date", sa.BigInteger),
    sa.Column("exchange", sa.Text, sa.ForeignKey(exchanges.c.exchange)),
)

equity_symbol_mappings = sa.Table(
    "equity_symbol_mappings",
    metadata,
    sa.Column(
        "id",
        sa.BigInteger,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column(
        "sid",
        sa.BigInteger,
        sa.ForeignKey(equities.c.sid),
        nullable=False,
        index=True,
    ),
    sa.Column(
        "symbol",
        sa.Text,
        nullable=False,
    ),
    sa.Column(
        "company_symbol",
        sa.Text,
        index=True,
    ),
    sa.Column(
        "share_class_symbol",
        sa.Text,
    ),
    sa.Column(
        "start_date",
        sa.BigInteger,
        nullable=False,
    ),
    sa.Column(
        "end_date",
        sa.BigInteger,
        nullable=False,
    ),
)

equity_supplementary_mappings = sa.Table(
    "equity_supplementary_mappings",
    metadata,
    sa.Column(
        "sid",
        sa.BigInteger,
        sa.ForeignKey(equities.c.sid),
        nullable=False,
        primary_key=True,
    ),
    sa.Column("field", sa.Text, nullable=False, primary_key=True),
    sa.Column("start_date", sa.BigInteger, nullable=False, primary_key=True),
    sa.Column("end_date", sa.BigInteger, nullable=False),
    sa.Column("value", sa.Text, nullable=False),
)

futures_root_symbols = sa.Table(
    "futures_root_symbols",
    metadata,
    sa.Column(
        "root_symbol",
        sa.Text,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column("root_symbol_id", sa.BigInteger),
    sa.Column("sector", sa.Text),
    sa.Column("description", sa.Text),
    sa.Column(
        "exchange",
        sa.Text,
        sa.ForeignKey(exchanges.c.exchange),
    ),
)

futures_contracts = sa.Table(
    "futures_contracts",
    metadata,
    sa.Column(
        "sid",
        sa.BigInteger,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column("symbol", sa.Text, unique=True, index=True),
    sa.Column(
        "root_symbol",
        sa.Text,
        sa.ForeignKey(futures_root_symbols.c.root_symbol),
        index=True,
    ),
    sa.Column("asset_name", sa.Text),
    sa.Column("start_date", sa.BigInteger, default=0, nullable=False),
    sa.Column("end_date", sa.BigInteger, nullable=False),
    sa.Column("first_traded", sa.BigInteger),
    sa.Column(
        "exchange",
        sa.Text,
        sa.ForeignKey(exchanges.c.exchange),
    ),
    sa.Column("notice_date", sa.BigInteger, nullable=False),
    sa.Column("expiration_date", sa.BigInteger, nullable=False),
    sa.Column("auto_close_date", sa.BigInteger, nullable=False),
    sa.Column("multiplier", sa.Float),
    sa.Column("tick_size", sa.Float),
)

asset_router = sa.Table(
    "asset_router",
    metadata,
    sa.Column("sid", sa.BigInteger, unique=True, nullable=False, primary_key=True),
    sa.Column("asset_type", sa.Text),
)

version_info = sa.Table(
    "version_info",
    metadata,
    sa.Column(
        "id",
        sa.Integer,
        unique=True,
        nullable=False,
        primary_key=True,
    ),
    sa.Column(
        "version",
        sa.Integer,
        unique=True,
        nullable=False,
    ),
    # This constraint ensures a single entry in this table
    sa.CheckConstraint("id <= 1"),
)

bundle_metadata = sa.Table(
    "bundle_metadata",
    metadata,
    sa.Column(
        "id",
        sa.Integer,
        primary_key=True,
        autoincrement=True,
    ),
    sa.Column(
        "bundle_name",
        sa.Text,
        nullable=False,
        unique=True,
    ),
    sa.Column(
        "source_type",
        sa.Text,
        nullable=False,
    ),
    sa.Column("source_url", sa.Text),
    sa.Column("api_version", sa.Text),
    sa.Column(
        "fetch_timestamp",
        sa.Integer,
        nullable=False,
    ),
    sa.Column("data_version", sa.Text),
    sa.Column(
        "checksum",
        sa.Text,
        nullable=False,
    ),
    sa.Column("timezone", sa.Text, default="UTC"),
    sa.Column(
        "created_at",
        sa.Integer,
        nullable=False,
    ),
    sa.Column(
        "updated_at",
        sa.Integer,
        nullable=False,
    ),
)

data_quality_metrics = sa.Table(
    "data_quality_metrics",
    metadata,
    sa.Column(
        "id",
        sa.Integer,
        primary_key=True,
        autoincrement=True,
    ),
    sa.Column(
        "bundle_name",
        sa.Text,
        sa.ForeignKey("bundle_metadata.bundle_name"),
        nullable=False,
    ),
    sa.Column(
        "row_count",
        sa.Integer,
        nullable=False,
    ),
    sa.Column(
        "start_date",
        sa.Integer,
        nullable=False,
    ),
    sa.Column(
        "end_date",
        sa.Integer,
        nullable=False,
    ),
    sa.Column("missing_days_count", sa.Integer, default=0),
    sa.Column("missing_days_list", sa.Text),
    sa.Column("outlier_count", sa.Integer, default=0),
    sa.Column("ohlcv_violations", sa.Integer, default=0),
    sa.Column(
        "validation_timestamp",
        sa.Integer,
        nullable=False,
    ),
    sa.Column("validation_passed", sa.Boolean, default=True),
)

# Create indexes for bundle metadata and quality metrics tables
sa.Index("idx_bundle_metadata_name", bundle_metadata.c.bundle_name)
sa.Index("idx_bundle_metadata_fetch", bundle_metadata.c.fetch_timestamp)
sa.Index("idx_quality_metrics_bundle", data_quality_metrics.c.bundle_name)
sa.Index("idx_quality_metrics_validation", data_quality_metrics.c.validation_timestamp)
